# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import python_files_pb2 as python__files__pb2


class PythonFilesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DownloadFile = channel.unary_stream(
            '/python_files_service.PythonFilesService/DownloadFile',
            request_serializer=python__files__pb2.Path.SerializeToString,
            response_deserializer=python__files__pb2.File.FromString,
        )
        self.UploadFile = channel.stream_unary(
            '/python_files_service.PythonFilesService/UploadFile',
            request_serializer=python__files__pb2.Request.SerializeToString,
            response_deserializer=python__files__pb2.Response.FromString,
        )


class PythonFilesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DownloadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PythonFilesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'DownloadFile': grpc.unary_stream_rpc_method_handler(
            servicer.DownloadFile,
            request_deserializer=python__files__pb2.Path.FromString,
            response_serializer=python__files__pb2.File.SerializeToString,
        ),
        'UploadFile': grpc.stream_unary_rpc_method_handler(
            servicer.UploadFile,
            request_deserializer=python__files__pb2.Request.FromString,
            response_serializer=python__files__pb2.Response.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'python_files_service.PythonFilesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class PythonFilesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DownloadFile(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_stream(request, target, '/python_files_service.PythonFilesService/DownloadFile',
                                              python__files__pb2.Path.SerializeToString,
                                              python__files__pb2.File.FromString,
                                              options, channel_credentials,
                                              insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadFile(request_iterator,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/python_files_service.PythonFilesService/UploadFile',
                                              python__files__pb2.Request.SerializeToString,
                                              python__files__pb2.Response.FromString,
                                              options, channel_credentials,
                                              insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
